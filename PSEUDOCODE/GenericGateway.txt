import GatewayAgent;
import ACPEntity;

import agent.specific.libraries;
import asset.protocol.specific.libraries;

import StructMessage;
import ACPMessageFormat;

abstract class GenericGatewayManager {

    GatewayAgent ga_agent;
    ACPEntity acp_entity;

    StructMessage structMsg;
    ACPMessageFormat acp_msg_content = null;

    // Constructor
    GenericGatewayManager() {
        launchAgent();    // Launch Gateway Agent
        launchACPEntity();   // Launch asset-specific protocol entity
    }

    void launchAgent() {
        // This method configures and launches the GA with agent-specific libraries
        ga_agent.launch();

        // Once the GA agent has been launched, it is also necessary to initialize it
        structMsg = StructMessage(action="init");
        ga_agent.processCommand(structMsg);
    }

    void launchACPEntity() {
        // This method launches the ACP entity with the data-oriented protocol-specific libraries

        acp_entity.launch();

        // The method to get the data from the asset need to be configured in the ACP entity
        acp_entity.configure_from_asset(receiveFromAssetHandlingMethod);
    }

    void receiveFromAssetHandlingMethod() {
        // This function will get the data from the asset and set to the global 'acp_msg_content' in order to invoke sendToGA
        acp_msg_content = contentFromAsset;
    }

    // This is the main loop of the Gateway Manager
    void main() {

        // First, an instance of the Gateway Manager need to be created
        gateway_instance = GenericGatewayManager()

        while (true) {
            // The main loop must be executed cyclically.
            receiveFromGA();
            if (acp_msg_content != null) {
                // If it is not null, the ACP entity has received a message from the asset
                sendToGA(acp_msg_content);
                acp_msg_content = null;
            }
        }
    }

    // This method checks if a message has been received from the GA. If true, it receives it to send the task to the asset
    void receiveFromGA() {
        structMsg = StructMessage(action="recv");
        ga_agent.processCommand(structMsg);

        // If the GA agent has received a message through ACL, it will update the struct message
        if (structMsg.getContent() != null) {
            acp_entity.sendToAsset(structMsg.getContent());
        }
    }

    void sendToGA(ACPMessageFormat acp_msg_content) {
        structMsg = StructMessage(action="send", content=acp_msg_content);
        ga_agent.processCommand(structMsg);
    }
}